---
import type { Track } from "@spotify/web-api-ts-sdk"
import { Icon } from "astro-icon/components"
import BaseHead from "../components/BaseHead.astro"
import { fetchSpotifyCurrentlyPlaying } from "../lib/spotify"
import { SITE_OWNER_SOCIALS } from "../constants"

const currentlyPlaying = await fetchSpotifyCurrentlyPlaying()

interface SpotifyTrack {
  name: string
  artists: { name: string }[]
  url: string
  displayText: string
}

let track: SpotifyTrack | null = null

if (currentlyPlaying !== null && currentlyPlaying.item.type === "track") {
  // type-casting is nasty but we've verified the "type" already
  const item = currentlyPlaying.item as Track
  track = {
    name: item.name,
    artists: item.artists,
    url: item.external_urls.spotify,
    displayText: `${item.name} â€“ ${item.artists.map((artist) => artist.name).join(", ")}`,
  }
}
---

<BaseHead title="demo" description="demo" />
<div class="flex flex-col min-h-screen">
  <div class="flex items-center justify-center flex-1">
    <div class="relative">
      <div class="top-1 right-14 w-fit absolute z-20">
        <div class="grid grid-flow-col gap-x-4 auto-cols-auto">
          {
            SITE_OWNER_SOCIALS.map((social) => (
              <a
                class:list={
                  [
                    // base
                    // "inline-block",
                  ]
                }
                href={social.url}
                rel="noopener noreferrer"
                target="_blank"
                aria-label={`Visit ${social.name}`}
              >
                <Icon
                  class="hover:text-accent"
                  name={`simple-icons:${social.name.toLowerCase()}`}
                  size={18}
                />
              </a>
            ))
          }
        </div>
      </div>
      <div id="logo" class="relative">
        <h1 class="text-9xl select-none">josef</h1>
        <span
          class="text-9xl font-medium absolute top-0.5 left-1.5 -z-10 blur-[0.2px] select-none"
          style="color:var(--color-orange);"
        >
          josef
        </span>
        <span
          class="text-9xl font-medium absolute top-1 left-3 -z-20 blur-[0.4px] select-none"
          style="color:var(--color-accent);"
        >
          josef
        </span>
        <span
          class="text-9xl font-medium absolute top-1.5 left-4.5 -z-30 blur-[0.6px] select-none"
          style="color:var(--color-rouge-800);"
        >
          josef
        </span>
      </div>
      <div
        id="currently-playing"
        class="right-0 -bottom-1.5 absolute text-right"
      >
        {
          track !== null ? (
            <a href={track.url} target="_blank" rel="noopener noreferrer">
              <div class="flex items-center justify-end space-x-2">
                <Icon
                  name={`simple-icons:spotify`}
                  size={16}
                  aria-hidden="true"
                />
                <span
                  data-rotate={track.displayText.length > 30}
                  data-text={track.displayText}
                >
                  {track.displayText}
                </span>
              </div>
            </a>
          ) : null
        }
      </div>
    </div>
  </div>
</div>

<style>
  h1 {
    /* font-family: var(--font-serif); */
    color: var(--color-primary);
  }
  #logo > span {
    font-family: Josefin Sans;
    transform-style: preserve-3d;
    text-rendering: optimizeLegibility;
  }

  #currently-playing a {
    text-decoration: none;
  }

  #currently-playing span {
    font-size: var(--text-sm);
    line-height: 1.5rem;
    height: 1.5rem;
    width: 200px;
    overflow: hidden;
    white-space: nowrap;
    display: inline-block;
    position: relative;

    color: transparent;
  }

  #currently-playing span::after {
    content: attr(data-text);
    position: absolute;
    white-space: nowrap;
    width: max-content;
    left: 0;
    top: 0;
    color: var(--josef-text-color);
  }

  #currently-playing span[data-rotate="true"]::after {
    animation: ticker 10s linear infinite;
  }

  @keyframes ticker {
    /* Initial pause */
    0%,
    15% {
      transform: translateX(0);
    }

    /* Move to a position where the end of text just exits the container */
    85%,
    100% {
      transform: translateX(calc(-100% + 200px));
    }
  }
</style>
